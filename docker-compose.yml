version: '3.8'

services:

  # Apache Solr
  solr:
      image: solr:latest
      container_name: solr
      ports:
      - "8983:8983"
      volumes:
      - ./solr-data:/var/solr
      command:
        - solr-precreate
        - restaurant-service
      networks:
      - app-network

  # PostgreSQL for review-service
  postgres_review:
    image: postgres:latest
    container_name: postgres_review
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=n11-final-review-service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./postgres-data/review:/var/lib/postgresql/data
    networks:
      - app-network

  # PostgreSQL for n11-final-logging-service
  postgres_logging:
    image: postgres:latest
    container_name: postgres_logging
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=n11-final-logging-service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./postgres-data/logging:/var/lib/postgresql/data
    networks:
      - app-network

  # Zookeeper
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  # Kafka
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "errorLog:1:1, infoLog:1:1, errorLog.DLT:1:1, infoLog.DLT:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network

  # Restaurant Service
  restaurant-service:
    build:
      context: ./restaurant-service
    container_name: restaurant-service
    ports:
      - "8081:8081"
    depends_on:
      - solr
    restart: always
    environment:
      - SOLR_HOST=solr
      - SOLR_PORT=8983
      - SOLR_CORE_NAME=restaurant-service
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SOLR_SERVICE_URL=http://solr:8983/solr
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP-SERVERS=kafka:9092
      - CROSS_ORIGIN_URL=http://localhost:3000
    networks:
      - app-network

  # Review Service
  review-service:
    build:
      context: ./review-service
    container_name: review-service
    ports:
      - "8080:8080"
    depends_on:
      - postgres_review
      - kafka
    restart: always
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_review:5432/n11-final-review-service
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - RESTAURANT_SERVICE_URL=http://restaurant-service:8081/api/v1/restaurants
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP-SERVERS=kafka:9092
      - CROSS_ORIGIN_URL=http://localhost:3000
    networks:
      - app-network

  # Logging Service
  logging-service:
    build:
      context: ./logging-service
    container_name: logging-service
    ports:
      - "8082:8082"
    depends_on:
      - postgres_logging
      - kafka
    restart: always
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_logging:5432/n11-final-logging-service
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP-SERVERS=kafka:9092
      - CROSS_ORIGIN_URL=http://localhost:3000
    networks:
      - app-network

networks:
  app-network:
    name: n11-final-network
    driver: bridge
